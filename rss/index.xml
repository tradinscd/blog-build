<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <atom:link href="http://dustintran.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://dustintran.com/blog/</link>
    <description></description>
    <pubDate>Fri, 30 Sep 2016 11:55:29 -0400</pubDate>
    
      <item>
        <title>NIPS 2016 Workshop on Approximate Inference</title>
        <link>http://dustintran.com/blog/nips-2016-workshop-on-approximate-inference</link>
        <guid isPermaLink="true">http://dustintran.com/blog/nips-2016-workshop-on-approximate-inference</guid>
        <description>&lt;p&gt;We’re organizing a NIPS workshop on approximate inference. It is together with Tamara Broderick, Stephan Mandt, and James McInerney—and alongside an incredible cast of seminal researchers: David Blei, Andrew Gelman, Mike Jordan, and Kevin Murphy. [&lt;a href=&quot;http://approximateinference.org&quot;&gt;Workshop homepage&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;This year, we set a theme based on what we believe are some of the most important challenges. In particular, there’s an emphasis on the practice of approximate inference, whether it be challenges which arise in applications or in software. Advances in both methodology and theory are of course crucial to achieve this end-goal; we also highly encourage such work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We have (quite a few!) travel awards. If you’re interested in applying, the travel
award and early application deadline is October 7.&lt;/p&gt;

&lt;p&gt;Call for papers below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;We invite researchers in machine learning and statistics to participate in the:

NIPS 2016 Workshop on Advances in Approximate Bayesian Inference
Friday 9 December 2016, Barcelona, Spain
www.approximateinference.org
Submission deadline: 1 November 2016

1. Call for Participation

We invite researchers to submit their recent work on the development, analysis, or application of approximate Bayesian inference. A submission should take the form of an extended abstract of 2-4 pages in PDF format using the NIPS style. Author names do not need to be anonymized and references may extend as far as needed beyond the 4 page upper limit. If authors' research has previously appeared in a journal, workshop, or conference (including the NIPS 2016 conference), their workshop submission should extend that previous work. Submissions may include a supplement/appendix, but reviewers are not responsible for reading any supplementary material.

Submissions will be accepted either as contributed talks or poster presentations. Extended abstracts should be submitted by 1 November; see website for submission details. Final versions of the extended abstract are due by 5 December, and will be posted on the workshop website.

2. Workshop Overview

Bayesian analysis has seen a resurgence in machine learning, expanding its scope beyond traditional applications. Increasingly complex models have been trained with large and streaming data sets, and they have been applied to a diverse range of domains. Key to this resurgence has been advances in approximate Bayesian inference. Variational and Monte Carlo methods are currently the mainstay techniques, where recent insights have improved their approximation quality, provided black box strategies for fitting many models, and enabled scalable computation.

In this year's workshop, we would like to continue the theme of approximate Bayesian inference with additional emphases. In particular, we encourage submissions not only advancing approximate inference but also regarding (1) unconventional inference techniques, with the aim to bring together diverse communities; (2) software tools for both the applied and methodological researcher; and (3) challenges in applications, both in non-traditional domains and when applying these techniques to advance current domains.

This workshop is a continuation of past years:
+ NIPS 2015 Workshop: Advances in Approximate Bayesian Inference
+ NIPS 2014 Workshop: Advances in Variational Inference
This workshop has been endorsed by the International Society for Bayesian Analysis (ISBA) and is supported by Disney Research.

3. Confirmed Speakers and Panelists

Invited speakers:
Barbara Engelhardt (Princeton University)
Surya Ganguli (Stanford University)
Jonathan Huggins (MIT)
Jeffrey Regier (UC Berkeley)
Matthew Johnson (Harvard University)

Panel: Software
TBA (Stan)
Noah Goodman (WebPPL; Stanford University)
Dustin Tran (Edward; Columbia University)
TBA (TensorFlow, BayesFlow; Google)
Michael Hughes (BNPy; Harvard University)

Panel: On the Foundations and Future of Approximate Inference
Ryan Adams (Harvard University, Twitter Cortex)
Barbara Engelhardt (Princeton University)
Philip Hennig (Max Planck Institute for Intelligent Systems)
Richard Turner (University of Cambridge)
Neil Lawrence (University of Sheffield)

4. Key Dates

Travel award application deadline: 7 October 2016
Early acceptance notification: 7 October 2016
Paper submission: 1 November 2016
Acceptance notification: 16 November 2016
Travel award notification: 16 November 2016
Final paper submission: 5 December 2016

Workshop organizers:
Tamara Broderick (MIT)
Stephan Mandt (Disney Research)
James McInerney (Columbia University)
Dustin Tran (Columbia University)

Advisory committee:
David Blei (Columbia University)
Andrew Gelman (Columbia University)
Michael Jordan (UC Berkeley)
Kevin Murphy (Google)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 30 Sep 2016 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Discussion of &quot;Fast Approximate Inference for Arbitrarily Large Semiparametric Regression Models via Message Passing&quot;</title>
        <link>http://dustintran.com/blog/discussion-of-fast-approximate-inference</link>
        <guid isPermaLink="true">http://dustintran.com/blog/discussion-of-fast-approximate-inference</guid>
        <description>&lt;p&gt;&lt;em&gt;This article is written with much help by David Blei. It is extracted from a discussion paper on “Fast Approximate Inference for Arbitrarily Large Semiparametric Regression Models via Message Passing”.&lt;/em&gt; &lt;a href=&quot;http://arxiv.org/abs/1609.05615&quot;&gt;[link]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We commend &lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt; for an excellent description of
message passing (&lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt;) and for developing it to infer large semiparametric
regression models.  We agree with the author in fully embracing the
modular nature of message passing, where one can define “fragments”
that enable us to compose localized algorithms.  We believe this
perspective can aid in the development of new algorithms for automated
inference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automated inference.&lt;/strong&gt;  The promise of automated algorithms is
that modeling and inference can be separated. A user can construct
large, complicated models in accordance with the assumptions he or she
is willing to make about their data. Then the user can use generic
inference algorithms as a computational backend in a “probabilistic
programming language,” i.e., a language for specifying generative
probability models.&lt;/p&gt;

&lt;p&gt;With probabilistic programming, the user no longer has to write their
own algorithms, which may require tedious model-specific derivations
and implementations. In the same spirit, the user no longer has to
bottleneck their modeling choices in order to fit the requirements of
an existing model-specific algorithm.  Automated inference enables
probabilistic programming systems, such as
Stan &lt;a href=&quot;#carpenter2016stan&quot;&gt;(Carpenter et al., 2016)&lt;/a&gt;, through methods like
automatic differentiation variational inference (&lt;span style=&quot;font-variant:small-caps;&quot;&gt;advi&lt;/span&gt;) &lt;a href=&quot;#kucukelbir2016automatic&quot;&gt;(Kucukelbir, Tran, Ranganath, Gelman, &amp;amp; Blei, 2016)&lt;/a&gt; and
no U-turn sampler (&lt;span style=&quot;font-variant:small-caps;&quot;&gt;nuts&lt;/span&gt;) &lt;a href=&quot;#hoffman2014nuts&quot;&gt;(Hoffman &amp;amp; Gelman, 2014)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though they aim to apply to a large class of models, automated
inference algorithms typically need to incorporate modeling structure
in order to remain practical. For example, Stan assumes that one can
at least take gradients of a model’s joint density. (Contrast this
with other languages which assume one can only sample from the model.)
However, more structure is often necessary: &lt;span style=&quot;font-variant:small-caps;&quot;&gt;advi&lt;/span&gt; and &lt;span style=&quot;font-variant:small-caps;&quot;&gt;nuts&lt;/span&gt;
are not fast enough by themselves to infer very large models, such as
hierarchical models with many groups.&lt;/p&gt;

&lt;p&gt;We believe &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt; and Wand’s work could offer fruitful avenues for
expanding the frontiers of automated inference. From our perspective,
a core principle underlying &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt; is to leverage structure when it
is available—in particular, statistical properties in the model—which provides useful computational properties.  In &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt;, two
examples are conditional independence and conditional conjugacy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From conditional independence to distributed computation.&lt;/strong&gt;
As &lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt; indicates, a crucial advantage of message
passing is that it modularizes inference; the computation can be
performed separately over conditionally independent posterior
factors. By definition, conditional independence separates a posterior
factor from the rest of the model, which enables &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt; to define a
series of iterative updates. These updates can be run asynchronously
and in a distributed environment.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/blog/assets/2016-09-19-figure.png&quot; style=&quot;width:200px;&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;em&gt;Figure 1.
A hierarchical model, with latent variables &lt;script type=&quot;math/tex&quot;&gt;\alpha_k&lt;/script&gt; defined locally
per group and latent variables &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; defined globally to be shared across groups.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We are motivated by hierarchical models, which substantially benefit
from this property. Formally, let &lt;script type=&quot;math/tex&quot;&gt;y_{nk}&lt;/script&gt; be the &lt;script type=&quot;math/tex&quot;&gt;n^{th}&lt;/script&gt; data
point in group &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, with a total of &lt;script type=&quot;math/tex&quot;&gt;N_k&lt;/script&gt; data points in group &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; and
&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; many groups. We model the data using local latent variables
&lt;script type=&quot;math/tex&quot;&gt;\alpha_k&lt;/script&gt; associated to a group &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, and using global latent
variables &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; which are shared across groups. The model is depicted
in Figure 1.&lt;/p&gt;

&lt;p&gt;The posterior distribution of local variables &lt;script type=&quot;math/tex&quot;&gt;\alpha_k&lt;/script&gt; and global
variables &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\alpha,\phi\mid\mathbf{y}) \propto
p(\phi\mid\mathbf{y}) \prod_{k=1}^K
\Big[ p(\alpha_k\mid \beta) \prod_{n=1}^{N_K} p(y_{nk}\mid\alpha_k,\phi) \Big].&lt;/script&gt;

&lt;p&gt;The benefit of distributed updates over the independent factors is
immediate. For example, suppose the data consists of 1,000 data points
per group (with 5,000 groups); we model it with 2 latent variables per
group and 20 global latent variables.  Passing messages, or
inferential updates, in parallel provides an attractive approach to
handling all 10,020 latent dimensions. (In contrast, consider a
sequential algorithm that requires taking 10,019 steps for all other
variables before repeating an update of the first.)&lt;/p&gt;

&lt;p&gt;While this approach to leveraging conditional independence is
straightforward from the message passing perspective, it is not
necessarily immediate from other perspectives.  For example, the
statistics literature has only recently come to similar ideas,
motivated by scaling up Markov chain Monte Carlo using divide and
conquer strategies &lt;a href=&quot;#huang2005sampling&quot;&gt;(Huang &amp;amp; Gelman, 2005; Wang &amp;amp; Dunson, 2013)&lt;/a&gt;.
These first analyze data locally over a partition of the joint
density, and second aggregate the local inferences.  In our work in
&lt;a href=&quot;#gelman2014expectation&quot;&gt;Gelman et al. (2014)&lt;/a&gt;, we arrive at the continuation of this
idea. Like message passing, the process is iterated, so that local
information propagates to global information and global information
propagates to local information. In doing so, we obtain a scalable
approach to Monte Carlo inference, both from a top-down view which
deals with fitting statistical models to large data sets and from a
bottom-up view which deals with combining information across local
sources of data and models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From conditional conjugacy to exact iterative updates.&lt;/strong&gt;
Another important element of message passing algorithms is conditional
conjugacy, which lets us easily calculate the exact distribution for a
posterior factor conditional on other latent variables. This enables
analytically tractable messages (c.f., Equations (7)-(8) of
&lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Consider the same hierarchical model discussed above, and set&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(y_k,\alpha_k\mid \phi)
= h(y_k, \alpha_k) \exp\{\phi^\top t(y_k, \alpha_k) - a(\phi)\},&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\phi)
= h(\phi) \exp\{\eta^{(0) \top} t(\phi) - a(\eta_0)\}
.&lt;/script&gt;

&lt;p&gt;The local factor &lt;script type=&quot;math/tex&quot;&gt;p(y_k,\alpha_k\mid\phi)&lt;/script&gt; has sufficient statistics
&lt;script type=&quot;math/tex&quot;&gt;t(y_k,\alpha_k)&lt;/script&gt; and natural parameters given by the global latent
variable &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt;.  The global factor &lt;script type=&quot;math/tex&quot;&gt;p(\phi)&lt;/script&gt; has sufficient
statistics &lt;script type=&quot;math/tex&quot;&gt;t(\phi) = (\phi, -a(\phi))&lt;/script&gt;, and with fixed
hyperparameters &lt;script type=&quot;math/tex&quot;&gt;\eta^{(0)}&lt;/script&gt;, which has two components: &lt;script type=&quot;math/tex&quot;&gt;\eta^{(0)} =
(\eta^{(0)}_1,\eta^{(0)}_2)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;This exponential family structure implies that, conditionally, the
posterior factors are also in the same exponential families
as the prior factors &lt;a href=&quot;#diaconis1979conjugate&quot;&gt;(Diaconis &amp;amp; Ylvisaker, 1979)&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\phi\mid\mathbf{y},\alpha)
= h(\phi) \exp\{\eta(\mathbf{y},\alpha)^\top t(\phi) - a(\mathbf{y},\alpha)\},&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\alpha_k\mid y_k, \phi)
= h(\alpha_k) \exp\{\eta(y_k, \phi)^\top t(\alpha_k) - a(y_k, \phi)\}
.&lt;/script&gt;

&lt;p&gt;The global factor’s natural parameter is &lt;script type=&quot;math/tex&quot;&gt;\eta(\mathbf{y},\alpha) =
(\eta^{(0)}_1 + \sum_{k=1}^K t(y_k, \alpha_k), \eta^{(0)}_2 + \sum_{k=1}^K N_k)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;With this statistical property at play—namely that conjugacy gives
rise to tractable conditional posterior factors—we can derive
algorithms at a conditional level with exact iterative updates.  This
is assumed for most of the message passing of semiparametric models in
&lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt;.  Importantly, this is not necessarily a
limitation of the algorithm. It is a testament to leveraging model
structure: without access to tractable conditional posteriors,
additional approximations must be made.  &lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt; provides
an elegant way to separate out these nonconjugate pieces from the
conjugate pieces.&lt;/p&gt;

&lt;p&gt;In statistics, the most well-known example which leverages
conditionally conjugate factors is the Gibbs sampling algorithm.  From
our own work, we apply the idea in order to access fast natural
gradients in variational inference, which accounts for the information
geometry of the parameter space &lt;a href=&quot;#hoffman2013stochastic&quot;&gt;(Hoffman, Blei, Wang, &amp;amp; Paisley, 2013)&lt;/a&gt;.  In
other work, we demonstrate a collection of methods for gradient-based
marginal optimization &lt;a href=&quot;#tran2016gradient&quot;&gt;(Tran, Gelman, &amp;amp; Vehtari, 2016)&lt;/a&gt;.  Assuming forms of
conjugacy in the model class arrives at the classic idea of
iteratively reweighted least squares as well as the EM algorithm. Such
structure in the model provides efficient algorithms—both
statistically and computationally—for their automated inference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Challenges and Future Directions.&lt;/strong&gt; Message passing is a
classic algorithm in the computer science literature, which is ripe
with interesting ideas for statistical inference. In particular,
&lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt; enables new advancements in the realm of automated inference,
where one can take advantage of statistical structure in the model.
&lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt; makes great steps following this direction.&lt;/p&gt;

&lt;p&gt;With that said, important open challenges still exist in order to
realize this fusion.&lt;/p&gt;

&lt;p&gt;First is about the design and implementation of probabilistic
programming languages. In order to implement &lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt;’s
message passing, the language must provide ways of identifying local
structure in a probabilistic program.  While that is enough to let
practitioners use &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt;, a much larger challenge is to
then automate the process of detecting local structure.&lt;/p&gt;

&lt;p&gt;Second is about the design and implementation of inference engines.
The inference must be extensible, so that users can not only employ
the algorithm in &lt;a href=&quot;#wand2016fast&quot;&gt;Wand (2016)&lt;/a&gt; but easily build on top of it.
Further, its infrastructure must be able to encompass a variety of
algorithms, so that users can incorporate &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt; as one of many
tools in their toolbox.&lt;/p&gt;

&lt;p&gt;Third, we think there are innovations to be made on taking the stance
of modularity to a further extreme. In principle, one can compose not
only localized message passing updates but compose localized inference
algorithms of any choice—whether it be exact inference, Monte Carlo,
or variational methods.  This modularity will enable new
experimentation with inference hybrids and can bridge the gap among
inference methods.&lt;/p&gt;

&lt;p&gt;Finally, while we discuss &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt; in the context of automation,
fully automatic algorithms are not possible. Associated to all
inference are statistical and computational
tradeoffs &lt;a href=&quot;#jordan2013statistics&quot;&gt;(Jordan, 2013)&lt;/a&gt;.  Thus we need algorithms along
the frontier, where a user can explicitly define a computational
budget and employ an algorithm achieving the best statistical
properties within that budget; or conversely, define desired
statistical properties and employ the fastest algorithm to achieve
them.  We think ideas in &lt;span style=&quot;font-variant:small-caps;&quot;&gt;mp&lt;/span&gt; will also help in developing some of
these algorithms.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;carpenter2016stan&quot;&gt;Carpenter, B., Gelman, A., Hoffman, M. D., Lee, D., Goodrich, B., Betancourt, M., … Riddell, A. (2016). Stan: A probabilistic programming language. &lt;i&gt;Journal of Statistical Software&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;diaconis1979conjugate&quot;&gt;Diaconis, P., &amp;amp; Ylvisaker, D. (1979). Conjugate Priors for Exponential Families. &lt;i&gt;The Annals of Statistics&lt;/i&gt;, &lt;i&gt;7&lt;/i&gt;(2), 269–281.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;gelman2014expectation&quot;&gt;Gelman, A., Vehtari, A., Jylänki, P., Robert, C., Chopin, N., &amp;amp; Cunningham, J. P. (2014). Expectation propagation as a way of life. &lt;i&gt;ArXiv Preprint ArXiv:1412.4869&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;hoffman2013stochastic&quot;&gt;Hoffman, M. D., Blei, D. M., Wang, C., &amp;amp; Paisley, J. (2013). Stochastic Variational Inference. &lt;i&gt;Journal of Machine Learning Research&lt;/i&gt;, &lt;i&gt;14&lt;/i&gt;, 1303–1347.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;hoffman2014nuts&quot;&gt;Hoffman, M. D., &amp;amp; Gelman, A. (2014). The no-U-turn sampler: adaptively setting path lengths in Hamiltonian Monte Carlo. &lt;i&gt;Journal of Machine Learning Research&lt;/i&gt;, &lt;i&gt;15&lt;/i&gt;, 1593–1623.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;huang2005sampling&quot;&gt;Huang, Z., &amp;amp; Gelman, A. (2005). Sampling for Bayesian Computation with Large Datasets. &lt;i&gt;SSRN Electronic Journal&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;jordan2013statistics&quot;&gt;Jordan, M. I. (2013). On statistics, computation and scalability. &lt;i&gt;Bernoulli&lt;/i&gt;, &lt;i&gt;19&lt;/i&gt;(4), 1378–1390.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;kucukelbir2016automatic&quot;&gt;Kucukelbir, A., Tran, D., Ranganath, R., Gelman, A., &amp;amp; Blei, D. M. (2016). Automatic Differentiation Variational Inference. &lt;i&gt;ArXiv Preprint ArXiv:1603.00788&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;tran2016gradient&quot;&gt;Tran, D., Gelman, A., &amp;amp; Vehtari, A. (2016). Gradient-based marginal optimization. &lt;i&gt;Technical Report&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;wand2016fast&quot;&gt;Wand, M. P. (2016). Fast Approximate Inference for Arbitrarily Large Semiparametric Regression Models via Message Passing. &lt;i&gt;ArXiv Preprint ArXiv:1602.07412&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;wang2013parallelizing&quot;&gt;Wang, X., &amp;amp; Dunson, D. B. (2013). Parallelizing MCMC via Weierstrass sampler. &lt;i&gt;ArXiv Preprint ArXiv:1312.4605&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Mon, 19 Sep 2016 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Blog has migrated from Ghost to Jekyll</title>
        <link>http://dustintran.com/blog/blog-has-migrated-from-ghost-to-jekyll</link>
        <guid isPermaLink="true">http://dustintran.com/blog/blog-has-migrated-from-ghost-to-jekyll</guid>
        <description>&lt;p&gt;In the past few days I spent time migrating the blog from
&lt;a href=&quot;https://ghost.org&quot;&gt;Ghost&lt;/a&gt; to &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The theme builds off
&lt;a href=&quot;https://rohanchandra.github.io/project/type/&quot;&gt;Type Theme&lt;/a&gt;, and is
heavily inspired by &lt;a href=&quot;http://blog.otoro.net/&quot;&gt;Otoro&lt;/a&gt;, the &lt;a href=&quot;http://www.nytimes.com/&quot;&gt;New York
Times&lt;/a&gt;, and the
&lt;a href=&quot;http://the-rosenrot.com/&quot;&gt;Rosenrot&lt;/a&gt;. The annals-like frontpage takes
cue from Paul Graham’s &lt;a href=&quot;http://paulgraham.com/articles.html&quot;&gt;essays&lt;/a&gt;
and Cosma Shalizi’s &lt;a href=&quot;http://bactra.org/notebooks/&quot;&gt;notebooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/2016-08-11-figure1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/blog/assets/2016-08-11-figure2.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;&lt;center&gt;Top: Old frontpage. Bottom: New frontpage.&lt;/center&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hooray for math! (using KaTeX)&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E(w_i,c_k,z) = -\sum_{j=1}^z w_{i,j} c_{k,j} + \Big[z\log a -\sum_{j=1}^z (w_{i,j}^2 +  c_{k,j}^2)\Big].&lt;/script&gt;

&lt;p&gt;Hooray for code snippets! (taken from &lt;a href=&quot;http://edwardlib.org/getting-started&quot;&gt;Edward&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;Set seed for both NumPy and TensorFlow.

  Parameters
  ----------
  x : int, float
    seed
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_random_seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hooray for bibliographies!
…
Okay I don’t quite have that one set up yet. But &lt;a href=&quot;https://github.com/inukshuk/jekyll-scholar&quot;&gt;it’s
doable&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The blog’s permalinks are the same. The &lt;a href=&quot;/blog/rss/&quot;&gt;RSS feed&lt;/a&gt; is the same.&lt;/p&gt;

&lt;h2 id=&quot;why-the-change&quot;&gt;Why the change?&lt;/h2&gt;

&lt;p&gt;I liked Ghost, having migrated from Wordpress and with the impression of a
sleeker and more modern content management system (CMS). But CMS’ have
always been a bother for me because I could never understand the
internals. It would always be a reliance on plugins in order to
accomplish things. Even with Ghost some things were too automagical
and hidden to the user.&lt;/p&gt;

&lt;p&gt;Time to go even more bare-bones with a static site generator.
&lt;a href=&quot;https://github.com/dustinvtran/blog&quot;&gt;All code and content for this blog is available&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s to hoping the redesign motivates me to write more often!&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Aug 2016 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Inference networks</title>
        <link>http://dustintran.com/blog/tutorial-on-inference-networks-2</link>
        <guid isPermaLink="true">http://dustintran.com/blog/tutorial-on-inference-networks-2</guid>
        <description>&lt;p&gt;I wrote a tutorial on &lt;a href=&quot;http://edwardlib.org/tut_inference_networks&quot;&gt;inference networks&lt;/a&gt; on the Edward website. I normally don’t like writing outsourced blog posts, but I figure it’s better to link there than write duplicated content which may later become outdated.&lt;/p&gt;

&lt;p&gt;Thanks go to Kevin Murphy for motivating the tutorial as it is based on our discussions, and also related discussion with Jaan Altosaar.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>On Bayesian and frequentist, latent variables and parameters</title>
        <link>http://dustintran.com/blog/on-bayesian-and-frequentist-latent-variables-and-parameters</link>
        <guid isPermaLink="true">http://dustintran.com/blog/on-bayesian-and-frequentist-latent-variables-and-parameters</guid>
        <description>&lt;p&gt;I’ve been helping write tutorials that teach concepts such as &lt;a href=&quot;https://github.com/blei-lab/edward/pull/136&quot;&gt;black box variational inference&lt;/a&gt; in Edward. And as I’ve been editing, I’ve noticed the majority of my suggestions are about the writing rather than the code. Communication is important—arguably more important in papers than the idea itself. Communication evokes different lines of thinking about how to approach problems, and it always has subtleties regarding the different culture and  set of problems one finds important. Here are a few subtleties that have come up recently and my stock answers to them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“Bayesian models” framed as placing priors on parameters of a likelihood.&lt;/strong&gt; This is a very frequentist -&amp;gt; Bayesian line of thinking.  I strongly believe models should simply be framed as a joint distribution &lt;script type=&quot;math/tex&quot;&gt;p(x, z)&lt;/script&gt; for data &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and latent variables &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;.&lt;sup&gt;1&lt;/sup&gt; The other line of thinking can lead to misunderstandings about Bayesian analysis. For example, a classical argument (and one which I still hear among some of my statistician friends in Berkeley and Stanford) is that Bayesian analysis is subjective because the prior &lt;script type=&quot;math/tex&quot;&gt;p(z)&lt;/script&gt; is subjective. But in fact the entire model is subjective—both likelihood and prior as &lt;a href=&quot;http://andrewgelman.com/2015/08/25/can-you-change-your-bayesian-prior/&quot;&gt;Andrew repeatedly states&lt;/a&gt;. The distinction away from the fact that you’re specifying a model is often meaningless. This relates to the old adage that “all models are wrong” (Box, 1976). Any model you work with is “subjective” according to the assumptions you’re willing to make in the model.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bayesian versus frequentist models.&lt;/strong&gt; The secret that no one wants to say publicly is that there’s no difference! A “latent variable model” or “hierarchical model” or “generative model” in Bayesian literature is just a “random effects model” in frequentist literature. I try to avoid attaching specific statistical methodologies to models because there is no difference. They are all just “probabilistic models”. The statistical methodology—whether it be Bayesian, frequentist, fiducial, whatever—is about how to reason with the model given data. That is, they are about “inference” and not the “model”. Why else do we do EM, a frequentist tool, on hierarchical models, typically labeled a Bayesian tool?&lt;/p&gt;

    &lt;p&gt;Frequentists may often use only the likelihood &lt;script type=&quot;math/tex&quot;&gt;p(x \mid z)&lt;/script&gt; as the model, so it is trivially a joint distribution &lt;script type=&quot;math/tex&quot;&gt;p(x, z)&lt;/script&gt; with a point mass distribution for &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;. But it’s useful to keep in mind the joint distribution as it explicitly bakes in the modeling assumptions one makes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Latent variables vs parameters.&lt;/strong&gt; These days I try to stick to calling &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; latent variables rather than parameters (and hence why I prefer to use &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; rather than &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;). Parameters connote the idea of having only one setting, and it brings up the whole frequentist-Bayesian debacle about whether parameters can be random. Calling them latent variables instead simply state that the model uses random variables that remain unobserved during inference. We may be interested in inferring the latent variables, and thus it is natural to think about what &lt;script type=&quot;math/tex&quot;&gt;p(z \mid x)&lt;/script&gt; means, or what it means to approximate &lt;script type=&quot;math/tex&quot;&gt;p(z \mid x)&lt;/script&gt; with a point. Or we may not be directly interested in the latent variables, and thus it’s natural to integrate over them during inference.&lt;sup&gt;2&lt;/sup&gt; Somehow I find this less convincing when thinking about &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; as “parameters”. “Parameters” introduce a concept beyond random variables and their realizations, and which I can’t formally wrap my head around.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Prior belief vs prior information.&lt;/strong&gt; I’ve started to follow Andrew in using the latter and avoiding the former. &lt;a href=&quot;http://andrewgelman.com/2015/07/15/prior-information-not-prior-belief/&quot;&gt;Prior belief makes Bayesian analysis sound like a religion&lt;/a&gt;. Prior information comes not only in the context of prior information about the latent variables but prior information about the problem (e.g., data’s likelihood) in general.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; For clarity, I’m ignoring the nuance with probabilistic programs, in the same way we typically don’t communicate everything using measures, or by first describing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Category_theory&quot;&gt;category&lt;/a&gt; we’re working in.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Random effects (Eisenhart, 1947), incidental parameters (Neyman and Scott, 1948), nuisance parameters (Kalbfleisch and Sprott, 1970), and latent data (Rubin, 1976) are often explained in frequentist literature as something to integrate over. But I don’t like them because they don’t explain what it means to treat them as random variables.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; In practice, we often work with “parameters” in the sense that we often work with point estimates during inference. This doesn’t mean that we shouldn’t continue working with them—it’s just that in principle it’s better to think about the optimal thing (inferring the full distribution) and viewing the point estimate as an approximation to the optimal thing. That is, what we should do in principle and what we should do in practice.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Variational auto-encoders do not train complex generative models</title>
        <link>http://dustintran.com/blog/variational-auto-encoders-do-not-train-complex-generative-models</link>
        <guid isPermaLink="true">http://dustintran.com/blog/variational-auto-encoders-do-not-train-complex-generative-models</guid>
        <description>&lt;p&gt;There is a &lt;a href=&quot;http://arxiv.org/abs/1606.05908&quot;&gt;tutorial on variational auto-encoders&lt;/a&gt; which popped up on my arXiv radar this week. Thanks to Carl Doersch for writing this tutorial! As a researcher in this area, I believe there is sorely a need for an exposition of recent developments in variational inference. Variational inference’s application for enabling deep generative models has exploded in the past few years. This tutorial is a great step in that direction. Inspired by this and  discussions with others during ICML, I’d like to make a few comments to clarify misunderstandings that are pervasive among newcomers to variational inference, Bayesian analysis, and/or auto-encoders.&lt;/p&gt;

&lt;p&gt;Variational auto-encoders are &lt;em&gt;not&lt;/em&gt; a way to train generative models. The generative model is &lt;em&gt;part&lt;/em&gt; of the variational auto-encoder, which is typically a deep latent Gaussian model (Rezende et al., 2014). Training generative models is done by inference, typically variational inference (Hinton and Van Camp, 1993; Waterhouse et al., 1996) with an inference network. This model-inference combination is what defines a variational auto-encoder (Kingma and Welling, 2014) and more classically a Helmholtz machine (Dayan et al., 1995). Making precise the separate components of model and inference is crucial for extensibility. For example, how can we build on the inference, leveraging Monte Carlo methods (MacKay and Gibbs, 1999; Salimans et al., 2015), or build on the modeling, leveraging recurrent compositions (Gregor et al., 2015)? If I learned anything at my time at Harvard statistics with people like Don Rubin, I learned that being precise about our language prevents our discourse from being ambiguous and our terms from becoming overloaded.&lt;/p&gt;

&lt;p&gt;Generative models are usually motivated from their immediate application of generating data that look like the training data. Variational auto-encoders, like, say, generative adversarial networks, are most generally a way to both postulate and infer complex data generative processes. This is possibly for unsupervised tasks, possibly supervised tasks, semi-supervised tasks, or even causal inferences. They are part of an underlying statistical methodology.&lt;sup&gt;1&lt;/sup&gt; This methodology simply frames models as distributions over data and latent variables, allowing models to address a broad array of downstream tasks with any size of data. For example, deep generative models can achieve “state-of-the-art” for supervised learning on small amounts of data (Damianou and Lawrence, 2013) and generalization with few examples (Salakhutdhinov et al., 2013).&lt;/p&gt;

&lt;p&gt;The neural network used in the encoder (variational distribution) does not lead to any richer approximating distribution. It is a way to amortize inference such that the number of parameters does not grow with the size of the data (an incredible feat, but not one for expressivity!) (Stuhlmüller et al., 2013). This is better explained from the perspective of variational inference than auto-encoders. For example, suppose we have a model with latent variables that are Gaussian a priori (as in VAEs). We may choose a fully factorized Gaussian as the variational distribution, where each latent variable is rendered independent. The inference network takes data as input and outputs the local variational parameters relevant to each data point. The optimal inference network outputs the set of Gaussian parameters which maximizes the variational objective. This means a variational auto-encoder with a perfect inference network can only do as well as a fully factorized Gaussian with no inference network.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The underlying statistical methodology of latent variable models is typically Bayesian. However, the distinction between frequentist and Bayesian models is practically none, e.g., Harville (1977).&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Much recent work, including my own, has tried to improve this simple approximation to improve our approximate inference. I invite you to the incredible developments since the past year: Rezende and Mohamed, 2015; Salimans et al., 2015; Tran et al., 2015; Tran et al., 2016; Burda et al., 2016; Ranganath et al., 2016; Maaløe et al., 2016; Mnih and Rezende, 2016; Louizos et al., 2016; Johnson et al., 2016; Dinh et al., 2016; Kingma et al., 2016.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Burda, Y., Grosse, R., &amp;amp; Salakhutdinov, R. (2016). Importance Weighted Autoencoders. In &lt;em&gt;International Conference on Learning Representations.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Damianou, A. C., &amp;amp; Lawrence, N. D. (2013). Deep Gaussian Processes. In &lt;em&gt;Artificial Intelligence and Statistics.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Dayan, P., Hinton, G. E., Neal, R. M., &amp;amp; Zemel, R. S. (1995). The Helmholtz Machine. Neural Computation, 7(5), 889–904. http://doi.org/10.1162/neco.1995.7.5.889&lt;/li&gt;
  &lt;li&gt;Dinh, L., Sohl-Dickstein, J., &amp;amp; Bengio, S. (2016). Density estimation using Real NVP. &lt;em&gt;arXiv.org.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Harville, D. A (1977). Maximum likelihood approaches to variance component estimation and to related problems. &lt;em&gt;Journal of the American Statistical Association&lt;/em&gt;, 72(358):320–338.&lt;/li&gt;
  &lt;li&gt;Hinton, G. and Van Camp, D (1993). Keeping the neural networks simple by minimizing the description length of the weights. In &lt;em&gt;Computational Learning Theory&lt;/em&gt;, pp. 5–13. ACM.&lt;/li&gt;
  &lt;li&gt;Johnson, M. J., Duvenaud, D., Wiltschko, A. B., Datta, S. R., &amp;amp; Adams, R. P. (2016). Composing graphical models with neural networks for structured representations and fast inference. &lt;em&gt;arXiv.org&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Kingma, D. P., &amp;amp; Welling, M. (2014). Auto-Encoding Variational Bayes. In &lt;em&gt;International Conference on Learning Representations&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Kingma, D. P., Salimans, T., &amp;amp; Welling, M. (2016). Improving Variational Inference with Inverse Autoregressive Flow. &lt;em&gt;arXiv.org&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Louizos, C., &amp;amp; Welling, M. (2016). Structured and Efficient Variational Deep Learning with Matrix Gaussian Posteriors. In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Maaløe, L., Sønderby, C. K., Sønderby, S. K., &amp;amp; Winther, O. (2016). Auxiliary Deep Generative Models. In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;MacKay, D. J., &amp;amp; Gibbs, M. N. (1999). Density networks. &lt;em&gt;Statistics and neural networks: advances at the interface&lt;/em&gt;. Oxford University Press, Oxford, 129-144.&lt;/li&gt;
  &lt;li&gt;Mnih, A., &amp;amp; Rezende, D. J. (2016). Variational inference for Monte Carlo objectives. In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Ranganath, R., Tran, D., &amp;amp; Blei, D. M. (2016). Hierarchical Variational Models. In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Rezende, D. J., Mohamed, S., &amp;amp; Wierstra, D. (2014). Stochastic Backpropagation and Approximate Inference in Deep Generative Models. In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Salimans, T., Kingma, D. P., &amp;amp; Welling, M. (2015). Markov Chain Monte Carlo and Variational Inference: Bridging the Gap. In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Salakhutdinov, R., Tenenbaum, J. B., and Torralba, A (2013). Learning with hierarchical-deep models. &lt;em&gt;Pattern Analysis and Machine Intelligence, IEEE Transactions on&lt;/em&gt;, 35 (8):1958–1971.&lt;/li&gt;
  &lt;li&gt;Stuhlmüller, A., Taylor, J., &amp;amp; Goodman, N. (2013). Learning Stochastic Inverses. In &lt;em&gt;Neural Information Processing Systems&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Tran, D., Blei, D. M., &amp;amp; Airoldi, E. M. (2015). Copula variational inference. In &lt;em&gt;Neural Information Processing Systems&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Tran, D., Ranganath, R., &amp;amp; Blei, D. M. (2016). The Variational Gaussian Process. &lt;em&gt;International Conference on Learning Representations&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Waterhouse, S., MacKay, D., and Robinson, T (1996). Bayesian methods for mixtures of experts. In &lt;em&gt;Neural Information Processing Systems&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>A quick update: Edward, and some motivations</title>
        <link>http://dustintran.com/blog/a-quick-update-edward-and-some-motivations</link>
        <guid isPermaLink="true">http://dustintran.com/blog/a-quick-update-edward-and-some-motivations</guid>
        <description>&lt;p&gt;As you may (or may not) know, I’ve been busy lately spear-heading &lt;a href=&quot;https://github.com/blei-lab/edward&quot;&gt;Edward&lt;/a&gt;, an open-source library for probabilistic modeling. It’s meant to help bridge the gap between what I view as two dichotomous approaches of statistical learning: one approach develops complex models in order to achieve the best results on a specific task; and the other approach adheres to simple models in order to understand every component of the analysis both empirically and theoretically. The former starts at the end-goal; the latter starts at the foundation.&lt;/p&gt;

&lt;p&gt;There are many names you can append to one of these approaches, and certainly those names imply contrasting motivations due to culture, and thus contrasting views and contrasting applications. But ultimately, the goal is still the same. The approaches are not orthogonal, but a lack of awareness connecting the two make them seem to be. A neural network is a powerful aproach for modeling non-linear functions (I mean this not tongue-in-cheek; it’s difficult to summarize many decades of innovation in a sentence). A Bayesian linear model is a powerful approach for incorporating parameter uncertainty during supervision, and for accessing a basis on which to validate our models.&lt;/p&gt;

&lt;p&gt;How do we &lt;a href=&quot;https://www.stat.washington.edu/raftery/Research/PDF/Gneiting2007jasa.pdf&quot;&gt;assess model fit&lt;/a&gt; from a complex neural network architecture, and &lt;a href=&quot;http://arxiv.org/abs/1206.6471&quot;&gt;generalize to any setting&lt;/a&gt;, whether it be &lt;a href=&quot;https://sites.google.com/site/dataefficientml/&quot;&gt;small data&lt;/a&gt;, &lt;a href=&quot;https://sites.google.com/site/dlworkshop16/&quot;&gt;simulation-based tasks&lt;/a&gt;, or &lt;a href=&quot;http://steinhardt.nyu.edu/priism/newsandevents/conferences&quot;&gt;even causal inferences&lt;/a&gt;? How do we build &lt;a href=&quot;http://link.springer.com/book/10.1007/978-1-4612-0745-0&quot;&gt;more expressive models&lt;/a&gt; when &lt;a href=&quot;http://authors.library.caltech.edu/13796/1/MACnc92d.pdf&quot;&gt;our&lt;/a&gt; &lt;a href=&quot;http://www.stat.columbia.edu/~gelman/research/published/A6n41.pdf&quot;&gt;tools&lt;/a&gt; tell us the generalized linear model fits okay, but is not nearly as fine-grained as we’d like it to be, or let our inferences &lt;a href=&quot;http://leon.bottou.org/publications/pdf/compstat-2010.pdf&quot;&gt;scale&lt;/a&gt; to data that no longer fits in memory? If we use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Long_short-term_memory&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;http://www.gatsby.ucl.ac.uk/~dayan/papers/hm95.pdf&quot;&gt;innovations&lt;/a&gt; of deep learning in concert with statistical analysis, or conversely, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Statistical_Methods_for_Research_Workers&quot;&gt;century of statistical foundations&lt;/a&gt; in deep learning, we might just achieve something quite grand. (And I mean this one only a little tongue-in-cheek.)&lt;/p&gt;

&lt;p&gt;Edward, broadly speaking, tries to combine efforts from both approaches. It’s a software library I’ve always wanted to develop but never had the right resources until now. Fast and distributed computation can be done using &lt;a href=&quot;https://www.tensorflow.org&quot;&gt;TensorFlow&lt;/a&gt; as a rich symbolic framework. Neural networks can be easily constructed with high-level libraries like &lt;a href=&quot;http://keras.io&quot;&gt;Keras&lt;/a&gt;.  Flexible probability models can be specified using languages such as &lt;a href=&quot;http://mc-stan.org&quot;&gt;Stan&lt;/a&gt;. And all of inference can be done using fast approximations via a built-in variational inference engine, with criticism techniques for both point prediction and distribution-based model assessments.&lt;/p&gt;

&lt;p&gt;I gave an Edward talk a few days ago at Google Brain— which I quite positively butchered due to a lack of sleep and preparation. (If only I had known I would get a sizeable cast of the TensorFlow core developers, Geoff Hinton, Jeff Dean, and Kevin Murphy in one room!) But I think the work explained itself, and with a lot of excitement about why Bayesian deep learning might be the right thing.&lt;/p&gt;

&lt;p&gt;There are a number of necessary developments in Edward to even make small steps in connecting these two approaches. I finally got to refactoring the code for &lt;a href=&quot;https://github.com/blei-lab/edward/blob/master/examples/convolutional_vae.py&quot;&gt;variational auto-encoders&lt;/a&gt;; and designing the &lt;a href=&quot;https://github.com/blei-lab/edward/pull/107&quot;&gt;criticism API&lt;/a&gt; for posterior predictive checks; and getting &lt;a href=&quot;http://cbonnett.github.io/MDN_EDWARD_KERAS_TF.html&quot;&gt;much help from others&lt;/a&gt; for explaining how to build neural network-based probabilistic models; and many open problems to &lt;a href=&quot;http://dustintran.com/papers/TranRanganathBlei2016.pdf&quot;&gt;try&lt;/a&gt; &lt;a href=&quot;http://arxiv.org/abs/1603.00788&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;http://arxiv.org/abs/1511.02386&quot;&gt;solve&lt;/a&gt;. It’s not even close to there for getting statisticians, machine learners, and deep learners to agree with one another. But I think Edward is making progress.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Video resources for machine learning</title>
        <link>http://dustintran.com/blog/video-resources-for-machine-learning</link>
        <guid isPermaLink="true">http://dustintran.com/blog/video-resources-for-machine-learning</guid>
        <description>&lt;p&gt;One feature unique to our field is the sheer amount of online resources. It’s one of the reasons I personally got into machine learning over other disciplines, as self-learning is much more accessible.&lt;/p&gt;

&lt;p&gt;This is especially true for video resources. Part of this is because as a field we are very well integrated with computer science, and thus we’re technologically more motivated. (However, arguably no other computer science research domain has as many resources as us.) Whatever the reason, it’s important that we take advantage of all the information available in order to maximize learning.&lt;/p&gt;

&lt;p&gt;I haven’t found a good collated list of machine learning videos, so I decided to compile my own. In general the following are excellent resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/&quot;&gt;VideoLectures.NET&lt;/a&gt; is the primary video archive for machine learning. Browse the homepage and you’ll see almost all machine learning videos featured on the frontpage, ranging from conferences, workshops, lectures, and even discussions.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techtalks.tv/&quot;&gt;TechTalks.tv&lt;/a&gt; is the second most used
archive. Notably, many ICML videos are located here.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://youtube.com/&quot;&gt;Youtube&lt;/a&gt; contains a few, such as certain
AISTATS and ICLR years. It’s best for collecting lectures, such as by &lt;a href=&quot;https://www.youtube.com/playlist?list=PLE6Wd9FR--EfW8dtjAuPoTuPcqmOV53Fu&quot;&gt;Nando de Freitas&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/playlist?list=PLZSO_6-bSqHTTV7w9u7grTXBHMH-mw3qn&quot;&gt;Alex Smola&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are all the video archives specific to conferences and workshops that I could find. ¹ Over this winter I’ve been relaxing and marathoning these as if they were TV shows—it’s quite a lot of fun!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/apps/catalog/default.aspx?p=1&amp;amp;sb=no&amp;amp;ps=25&amp;amp;t=videos&amp;amp;sf=&amp;amp;s=&amp;amp;r=&amp;amp;vr=&amp;amp;ra=&quot;&gt;2015: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLhoHEZlJjdQJLRUSE9_55eXkwNXKTiNQF&quot;&gt;2015: Gaussian Process Summer School, Sheffield&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/deeplearning2015_montreal/&quot;&gt;2015: Deep Learning Summer School, Montreal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCXDf7Y4KMcqPWHriorcMDNg/videos&quot;&gt;2015: Uncertainty in Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLGJm1x3XQeK0NgFOX2Z7Wt-P5RU5Zv0Hv&quot;&gt;2015: Arthur M. Sackler Colloquia: Drawing Causal Inference from Big Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLhiWXaTdsWB8PnrVZquVyqlRFWXM4ijYz&quot;&gt;2015: International Conference on Learning Representations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/colt2015_paris/&quot;&gt;2015: Conference on Learning Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCT1k2e63pqm_VSXmaF21n6g/videos&quot;&gt;2015: Machine Learning Summer School, Sydney&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fields.utoronto.ca/video-archive/event/316/2014&quot;&gt;2014: UToronto Workshop on Big Data and Statistical Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nips.cc/Conferences/2014/Schedule&quot;&gt;2014: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLhoHEZlJjdQKgrpK70Ym04Ju3-9W-QXns&quot;&gt;2014: Gaussian Process Summer School, Sheffield&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLZSO_6-bSqHQCIYxE3ycGLXHMjK3XV7Iz&quot;&gt;2014: Machine Learning Summer School, Pittsburgh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techtalks.tv/icml2014/&quot;&gt;2014: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/colt2014_barcelona/&quot;&gt;2014: Conference on Learning Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCQeS3L6d-S6ZeCQChFyK5Uw&quot;&gt;2014: Artificial Intelligence and Statistics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLhoHEZlJjdQKI1cs5yPRUYdgcsE0HctoQ&quot;&gt;2014: Gaussian Process Winter School, Sheffield&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC3ywjSv5OsDiDAnOP8C1NiQ&quot;&gt;2014: Machine Learning Summer School, Iceland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/nipsworkshops2013_laketahoe/&quot;&gt;2013: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techtalks.tv/icml2013/&quot;&gt;2013: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLqJm7Rc5-EXFv6RXaPZzzlzo93Hl0v91E&quot;&gt;2013: Machine Learning Summer School, Tuebingen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/colt2013_princeton/&quot;&gt;2013: Conference on Learning Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLLoKvRqQVbtI-ZhBpBrKT2KllP5dH8O0M&quot;&gt;2013-14: Harvard Institute for Quantitative Social Science, Applied Statistics Workshop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://icerm.brown.edu/video_archive/&quot;&gt;2012: Brown ICERM workshops&lt;/a&gt; (the &lt;a href=&quot;https://icerm.brown.edu/sp-f12-w1/&quot;&gt;2012 Bayesian nonparametrics&lt;/a&gt; is particularly good)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/nips2012_laketahoe/&quot;&gt;2012: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/uai2012_catalinaislands/&quot;&gt;2012: Uncertainty in Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techtalks.tv/search/results/?q=icml+2012&quot;&gt;2012: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/aaai2012_toronto/&quot;&gt;2012: AAAI Conference on Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/nips2011_granada/&quot;&gt;2011: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/uai2011_barcelona/&quot;&gt;2011: Uncertainty in Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/colt2011_budapest/&quot;&gt;2011: Conference on Learning Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/aistats2011_fortlauderdale/&quot;&gt;2011: Artificial Intelligence and Statistics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/nips2010_vancouver/&quot;&gt;2010: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/icml2010_haifa/&quot;&gt;2010: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/aistats2010_sardinia/&quot;&gt;2010: Artificial Intelligence and Statistics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/nips09_vancouver/&quot;&gt;2009: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/mlss09uk_cambridge/&quot;&gt;2009: Machine Learning Summer School, Cambridge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/icml09_montreal/&quot;&gt;2009: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/kdd08_las_vegas/&quot;&gt;2008: Knowledge Discovery and Data Mining&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/uai08_helsinki/&quot;&gt;2008: Uncertainty in Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/icml08_helsinki/&quot;&gt;2008: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/icml07_corvallis/&quot;&gt;2007: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/nips06_whistler/&quot;&gt;2006: Neural Information Processing Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/icml05_bonn/&quot;&gt;2005: International Conference on Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this is of use. I wish I had time to go further and collect resources regarding specific ideas or techniques, such as David Blei’s 2009 lecture on &lt;a href=&quot;http://videolectures.net/mlss09uk_blei_tm/&quot;&gt;Topic models&lt;/a&gt;, or Peter Orbanz’s 2009 lecture on &lt;a href=&quot;http://videolectures.net/mlss09uk_orbanz_fnbm/&quot;&gt;Foundations of Bayesian nonparametrics&lt;/a&gt;. Perhaps someone not me will do this in the future.&lt;/p&gt;

&lt;p&gt;¹ If you have links to others not listed here and that you feel should be added, or if there is a broken link, please contact me at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#100;&amp;#117;&amp;#115;&amp;#116;&amp;#105;&amp;#110;&amp;#064;&amp;#099;&amp;#115;&amp;#046;&amp;#099;&amp;#111;&amp;#108;&amp;#117;&amp;#109;&amp;#098;&amp;#105;&amp;#097;&amp;#046;&amp;#101;&amp;#100;&amp;#117;&quot;&gt;&amp;#100;&amp;#117;&amp;#115;&amp;#116;&amp;#105;&amp;#110;&amp;#064;&amp;#099;&amp;#115;&amp;#046;&amp;#099;&amp;#111;&amp;#108;&amp;#117;&amp;#109;&amp;#098;&amp;#105;&amp;#097;&amp;#046;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt;. Any help is appreciated and would also help the community at large. :-)&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Stochastic Expectation Propagation</title>
        <link>http://dustintran.com/blog/stochastic-expectation-propagation</link>
        <guid isPermaLink="true">http://dustintran.com/blog/stochastic-expectation-propagation</guid>
        <description>&lt;ul&gt;
  &lt;li&gt;Yingzhen Li, Jose Miguel Hernandez-Lobato, and Richard E. Turner. Stochastic Expectation Propagation. In &lt;em&gt;&lt;a href=&quot;http://papers.nips.cc/paper/5760-stochastic-expectation-propagation.pdf&quot;&gt;Neural Information Processing Systems&lt;/a&gt;&lt;/em&gt;, 2015.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Expectation propagation (EP) is a popular technique for approximate Bayesian inference, although it has arguably lost favor in recent years to variational inference.  Whereas variational inference was made scalable to massive data sets through stochastic variational inference (Hoffman et al., 2013), and thus attractive to machine learning practitioners, expectation propagation is limited by a memory overhead which scales with the number of data points. This paper proposes an extension of EP which removes the complexity requirement and thus enables it to scale to massive data.&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}=\{\mathbf{x}_k\}&lt;/script&gt; be a data set split into &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; components, and &lt;script type=&quot;math/tex&quot;&gt;p(\mathbf{x}\mid\mathbf{\theta})&lt;/script&gt; be a model likelihood with prior &lt;script type=&quot;math/tex&quot;&gt;p(\mathbf{\theta})&lt;/script&gt;. We aim to learn an approximating distribution &lt;script type=&quot;math/tex&quot;&gt;q(\mathbf{\theta})&lt;/script&gt; such that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\mathbf{\theta}\mid \mathbf{x})
\propto
p(\mathbf{\theta})\prod_{k=1}^K p(\mathbf{x}_k\mid\mathbf{\theta})
\approx
q(\mathbf{\theta})
\propto
p(\mathbf{\theta})\prod_{k=1}^K f_k(\mathbf{\theta}).&lt;/script&gt;

&lt;p&gt;Following the way Zoubin Ghahramani motivates EP, we would like to minimize &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(p(\mathbf{\theta}\mid \mathbf{x})\|q(\mathbf{\theta}))&lt;/script&gt; (I have no clue who first motivated EP from this way—Zoubin’s slides were how I first learned this). This can be interpreted as a reverse analog of the variational objective: whereas VI is restricted to the support of the posterior and is “mode-seeking” (Minka, 2005), this KL contains &lt;em&gt;at least&lt;/em&gt; the support of the posterior and is “inclusive” (Frey, 2000). Minimizing this KL could proceed by iteratively updating the factors &lt;script type=&quot;math/tex&quot;&gt;f_k(\mathbf{\theta})&lt;/script&gt;. Denoting the leave-one-out posterior &lt;script type=&quot;math/tex&quot;&gt;p_{-k}(\mathbf{\theta})=p(\mathbf{\theta}\mid \mathbf{x})/p(\mathbf{x}_k\mid\mathbf{\theta})&lt;/script&gt;, we iteratively minimize &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(p(\mathbf{\theta}\mid \mathbf{x})\|p_{-k}(\mathbf{\theta})f_k(\mathbf{\theta}))&lt;/script&gt; for each &lt;script type=&quot;math/tex&quot;&gt;k=1,\ldots,K&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;However, &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(p\|q)&lt;/script&gt; is intractable (and so is the iterative version) as it requires calculating the posterior density; therefore we minimize an approximation to it. Consider approximating the leave-one-out posterior with the &lt;em&gt;cavity distribution&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;q_{-k}(\mathbf{\theta}) = q(\mathbf{\theta})/f_k(\mathbf{\theta})&lt;/script&gt;, which is the approximating distribution without the &lt;script type=&quot;math/tex&quot;&gt;k^{th}&lt;/script&gt; likelihood approximation. Define the &lt;em&gt;tilted distribution&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;q_{\backslash k}(\mathbf{\theta})=q_{-k}(\mathbf{\theta}) p(\mathbf{x}_k\mid\mathbf{\theta})&lt;/script&gt;, which is the corresponding cavity distribution with the true likelihood factor plugged in.  EP iteratively solves&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min_{f_k}\mathrm{KL}(q_{\backslash k}(\mathbf{\theta}) \| q_{-k}(\mathbf{\theta}) f_k(\mathbf{\theta})),\quad k=1,\ldots,K.&lt;/script&gt;

&lt;p&gt;This objective is a good proxy to &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(p\|q)&lt;/script&gt; if the true likelihood factor &lt;script type=&quot;math/tex&quot;&gt;p(\mathbf{x}_k\mid\mathbf{\theta})&lt;/script&gt; contributes to the leave-one-out posterior in the same way as it does in the tilted distribution.&lt;/p&gt;

&lt;p&gt;Calculating the cavity distribution for each &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; requires explicit storage of the approximating factors &lt;script type=&quot;math/tex&quot;&gt;f_k(\mathbf{\theta})&lt;/script&gt;. This implies that EP has an &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(K)&lt;/script&gt; memory requirement which prevents it from scaling to large data sets. To solve this, the authors consider storage of only a single factor &lt;script type=&quot;math/tex&quot;&gt;f(\mathbf{\theta})&lt;/script&gt;; rather than trying to capture the individual effect of the likelihood factors, the single factor captures only the average effect. Stochastic expectation propagation (SEP) uses the same iterative KL objective to learn the next approximating factor &lt;script type=&quot;math/tex&quot;&gt;f_k(\mathbf{\theta})&lt;/script&gt;, and additionally updates &lt;script type=&quot;math/tex&quot;&gt;f(\mathbf{\theta})=f(\mathbf{\theta})^{1-1/K}f_k(\mathbf{\theta})^{1/K}&lt;/script&gt;.  By storing only the average effect of the likelihood factors, SEP approximates the true cavity distributions &lt;script type=&quot;math/tex&quot;&gt;q_{-k}(\mathbf{\theta})\propto q(\mathbf{\theta})/f_k(\mathbf{\theta})&lt;/script&gt; with an averaged cavity distribution &lt;script type=&quot;math/tex&quot;&gt;q_{-1}(\mathbf{\theta})\propto q(\mathbf{\theta})/f(\mathbf{\theta})&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;I’m a big fan of the paper. The exposition on EP, assumed density filtering, and message passing is excellent, and it naturally motivates SEP following the technical developments of EP. The use of an averaged cavity distribution is an unfortunate compromise, but it seems necessary in order to scale local approximation techniques such as EP.&lt;/p&gt;

&lt;p&gt;The authors make a cool connection to SVI. If the local minimizations in SEP are instead doing the reverse KL, then this is a form of “stochastic” variational message passing. Moreover, if the update for the single factor &lt;script type=&quot;math/tex&quot;&gt;f(\mathbf{\theta})&lt;/script&gt; follows &lt;script type=&quot;math/tex&quot;&gt;f(\mathbf{\theta})^{1 - \epsilon}f_n(\mathbf{\theta})^{\epsilon}&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; uses a Robbins-Monro schedule, then this is the same as stochastic variational inference with a mean-field approximation. An interesting extension then is to apply the equivalent of an adaptive learning rate in stochastic approximations for the geometric scale factor when updating &lt;script type=&quot;math/tex&quot;&gt;f(\mathbf{\theta})&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Hogwild (Nui et al., 2011) and asynchronous versions also naturally follow which is cool. I also think it would have been useful for the paper to fight for the streaming data stance. That is, it’s trivial for stochastic EP to learn on streaming data whereas it is impossible for vanilla EP.&lt;/p&gt;

&lt;p&gt;The move to &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(p\|q)&lt;/script&gt; with SEP does require some compromises in contrast to SVI unfortunately. For instance, unlike VI to SVI, EP to SEP compromises the approximation quality in order to make it scalable. That is, SVI still performs the same global minimization of &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(q\|p)&lt;/script&gt;, and shares nice properties through theory of stochastic approximations (Robbins and Monro, 1951), whereas SEP does not preserve the same local minimization as EP. You can imagine scenarios where an averaged likelihood approximator will not work, or even the “minibatch” M of K extension of them. Additionally, it’s not immediately clear how to extend EP beyond approximations which preserve dependence between the local approximations.&lt;/p&gt;

&lt;p&gt;Minor comment: like much of Tom Minka’s work, they note that the local KL minimizations can more generally use &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;-divergence measures. I still think this is a little restricting, as in general you just want &lt;em&gt;some&lt;/em&gt; approximation; therefore something like a Laplace approximation (Smola et al., 2004) is valid as well, and similarly, nested EP (Riihimaki et al., 2013) is more conducive following this motivation.&lt;/p&gt;

&lt;p&gt;I’m excited to hear more about stochastic EP from their poster and spotlight at NIPS! (The same authors have a number of interesting extensions of this paper at a few workshops as well.)&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Dec 2015 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>At NIPS 2015</title>
        <link>http://dustintran.com/blog/at-nips-2015</link>
        <guid isPermaLink="true">http://dustintran.com/blog/at-nips-2015</guid>
        <description>&lt;p&gt;I’m quite excited for &lt;a href=&quot;https://nips.cc&quot;&gt;NIPS&lt;/a&gt; this year, which starts this Monday.&lt;/p&gt;

&lt;p&gt;It’s always interesting to look at the recent trends from browsing the schedule. Deep learning and reinforcement learning are of course a big highlight of NIPS, with &lt;em&gt;three&lt;/em&gt; tutorials, a symposium, and many affiliated workshops. Approximate inference is becoming increasingly more mainstream as complex probabilistic models are fit with scalable inference strategies. Similarly, probabilistic programming—and the general concept of developing generic algorithms which fit broad classes of models—is becoming crucial to model prototyping. Gaussian processes are big just as they were in the last ICML: Bayesian optimization, Bayesian nonparametrics, and kernel methods are in general becoming more feasible and used in practice.&lt;/p&gt;

&lt;p&gt;On personal details, I’ll be presenting a poster on &lt;a href=&quot;http://dustintran.com/papers/TranBleiAiroldi2015.pdf&quot;&gt;Copula variational inference&lt;/a&gt;, which is joint work with Dave Blei and Edo Airoldi, trying to tackle the general problem of learning posterior correlation in variational inference. I’m also helping organize the &lt;a href=&quot;http://approximateinference.org&quot;&gt;Advances in Approximate Bayesian Inference&lt;/a&gt; workshop on Friday. We have an incredible list of talks lined up, and two panels which I’m sure will be insightful. On Saturday, I’ll be giving a talk at the &lt;a href=&quot;http://www.blackboxworkshop.org&quot;&gt;Black Box Learning and Inference&lt;/a&gt; workshop. It covers my most recent research on developing a rich framework for variational inference (abstract below). The &lt;a href=&quot;http://mc-stan.org/misc/nips&quot;&gt;Stan team&lt;/a&gt; also has a webpage on NIPS.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title: Variational models&lt;/p&gt;

  &lt;p&gt;Abstract:&lt;/p&gt;

  &lt;p&gt;Originally developed in the 1990s, variational inference has enjoyed renewed interest around scalable optimization for large datasets, black box strategies for inferring broad model classes, and neural networks for amortized inference. However, this research has been constrained by the lack of an expressive family of approximating distributions, which can generalize across many models. I will present the framework of variational models, which interpret the approximating family as a model of the posterior latent variables. This naturally leads to Bayesian constructs for developing expressive approximations. Following this, I will present a particular instantiation termed the variational Gaussian process. With applications to auto-encoders and deep recurrent attention models, I show that the variational model’s complexity grows efficiently and towards any distribution.&lt;/p&gt;

  &lt;p&gt;Joint work with Rajesh Ranganath and Dave Blei.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 04 Dec 2015 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Denoising Criterion for Variational Auto-Encoding Framework</title>
        <link>http://dustintran.com/blog/denoising-criterion-for-variational-auto-encoding-framework</link>
        <guid isPermaLink="true">http://dustintran.com/blog/denoising-criterion-for-variational-auto-encoding-framework</guid>
        <description>&lt;ul&gt;
  &lt;li&gt;Daniel Jiwoong Im, Sungjin Ahn, Roland Memisevic, and Yoshua Bengio. Denoising Criterion for Variational Auto-Encoding Framework. &lt;a href=&quot;http://arxiv.org/abs/1511.06406&quot;&gt;arXiv preprint arXiv:1511.06406&lt;/a&gt;, 2015.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Auto-encoders are used to learn representations of observed data &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. They do so by minimizing the reconstruction error of a decoder &lt;script type=&quot;math/tex&quot;&gt;p(x\mid z)&lt;/script&gt;, given a characterization of hidden variables &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; from an encoder &lt;script type=&quot;math/tex&quot;&gt;q(z\mid x)&lt;/script&gt;. Along with a penalty &lt;script type=&quot;math/tex&quot;&gt;P_\alpha&lt;/script&gt; for regularization, this can be written as maximizing the objective&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{\text{ae}} = \mathbb{E}_{q(z\mid x)}[\log p(x\mid z)] - P_\alpha&lt;/script&gt;

&lt;p&gt;over the encoder and decoder’s parameters. However, it’s unclear what a principled choice of the penalty is, as well as the choice of the encoder for a given decoder &lt;script type=&quot;math/tex&quot;&gt;p(x\mid z)&lt;/script&gt;. Variational auto-encoders (Kingma and Welling, 2014; Rezende et al., 2014) reinterpret the evidence lower bound prominent in variational inference for this purpose:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{\text{vae}} = \mathbb{E}_{q(z\mid x)}[\log p(x\mid z)] - \mathrm{KL}(q(z\mid x)\| p(z)),&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;p(z)&lt;/script&gt; is a model prior placed over the hidden variables of the encoder. The penalty term is automatically given as the KL divergence between the encoder and the prior, and the encoder can more generally be specified following variational inference literature. This is now a probabilistic encoder-decoder, with a principled objective given by a lower bound to the model evidence &lt;script type=&quot;math/tex&quot;&gt;\log p(x)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;In this paper, Im et al. take ideas from denoising auto-encoders (Vincent et al., 2008) and apply it to variational auto-encoders. In particular, they consider a &lt;em&gt;corrupted distribution&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;q(x'\mid x)&lt;/script&gt;, such that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;q(z\mid x) = \int q(z\mid \tilde{x})q(\tilde{x}\mid x)\mathrm{d}\tilde{x}.&lt;/script&gt;

&lt;p&gt;With a distribution to model corrupted noise, the augmented &lt;script type=&quot;math/tex&quot;&gt;q(z\mid x)&lt;/script&gt; is more expressive than the original &lt;script type=&quot;math/tex&quot;&gt;q(z\mid x)&lt;/script&gt; without corruption: it is able to model additional uncertainty around the data inputs.&lt;/p&gt;

&lt;p&gt;For inference, plugging this variational distribution into the ELBO leads to an analytically intractable objective, as the log-density &lt;script type=&quot;math/tex&quot;&gt;\log q(z\mid x)&lt;/script&gt; cannot be computed. As a proxy, they propose maximizing the objective function&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{\text{dvae}} = \mathbb{E}_{q(\tilde{x}\mid x)}\Big[\mathbb{E}_{q(z\mid x)}\Big[\log\frac{p(x, z)}{q(z\mid\tilde{x})}\Big]\Big],&lt;/script&gt;

&lt;p&gt;which they show is in fact an upper bound to the original ELBO. They also claim it is still a lower bound to the model evidence &lt;script type=&quot;math/tex&quot;&gt;\log p(x)&lt;/script&gt;, and thus still a valid variational objective (I’ll comment on this later). Gradients proceed as typically done in the literature, either using the reparameterized gradient for differentiable latent variables, or the score function estimator in the more general case. They have an interesting Q&amp;amp;A format for discussing their experiments that I found kind of cool.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;This paper is eerily similar to a paper Rajesh Ranganath, Dave Blei, and I uploaded just two weeks earlier than theirs, on &lt;a href=&quot;http://arxiv.org/abs/1511.02386&quot;&gt;Hierarchical Variational Models&lt;/a&gt;. And that was uploaded only three weeks ago from today! Man, the field moves fast.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The idea is the same: place a prior on inputs to the variational distribution—treating them as &lt;em&gt;variational&lt;/em&gt; latent variables—and proceed to marginalize them out. The new inputs are now the inputs to the prior distribution. In their case, the prior is on the data input for inference networks, which output local variational parameters. In our case, the prior is on variational parameters more generally. A prior on data input is the special case when the variational model uses an inference network: following our notation, we replace  &lt;script type=&quot;math/tex&quot;&gt;q(z;\lambda)&lt;/script&gt; with the more powerful &lt;script type=&quot;math/tex&quot;&gt;q(z;\theta)=\int q(z\mid\lambda)q(\lambda;\theta)\mathrm{d}\lambda&lt;/script&gt;, and use an inference network &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; to output prior hyperparameters &lt;script type=&quot;math/tex&quot;&gt;\theta=\phi(x)&lt;/script&gt; (see end of Section 5).&lt;/li&gt;
  &lt;li&gt;The source of inspiration is different: they follow the standard procedure in denoising auto-encoders. We follow the Bayesian framework, viewing the variational distribution as a model of the posterior latent variables. These different sources of inspiration motivate difference choices of complexity for the prior: they only consider Bernoulli or Gaussian, whereas from the Bayesian interpretation, it is natural to study more complex priors such as the normalizing flow (Rezende and Mohamed, 2015) as a prior; we show the latter leads to more expressive approximations and also more scalable computation. (And in our more recent paper on the &lt;a href=&quot;http://arxiv.org/abs/1511.06499&quot;&gt;Variational Gaussian Process&lt;/a&gt;, we use an even cooler prior :^).&lt;/li&gt;
  &lt;li&gt;The variational objectives are different, and I have concerns that their objective is not in fact a lower bound on &lt;script type=&quot;math/tex&quot;&gt;\log p(x)&lt;/script&gt;.¹ This means the values of the objective function are no longer a proxy for the model evidence. Among a few things, this invalidates the experimental results, as they compare to methods based on reported variational bounds. Further, maximizing their objective can lead to poor approximations, as there is no stopping the function to blow up to arbitrary values as the global maximum. Actually, it surprises me that the maximized variational objective values in the experiments are still close to those in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_{\text{vae}}&lt;/script&gt;. Would be very interested to hear from the authors on these issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of whether the theorems and experiments are correct, denoising variational auto-encoders is a much needed idea. It provides great intuition for why one should use hierarchical instantiations of variational models. Moreover it’s always interesting to see the same ideas inspired from a different field. These intuitions especially go nicely with our &lt;a href=&quot;http://arxiv.org/abs/1511.06499&quot;&gt;VGP paper&lt;/a&gt;, in which we make more explicit the auto-encoder connection for learning variational models with latent variables. Maybe we’ll add these details in a future revision.&lt;/p&gt;

&lt;p&gt;Minor point: They claim that injecting noise both at the data input level (“denoising auto-encoder”) and the stochastic hidden layer level (“variational auto-encoder”) can be advantageous. However, they’re really one and the same, which I’m sure they’re aware of as they wrote Lemma 1 in this light. That is, the corrupted hidden variable &lt;script type=&quot;math/tex&quot;&gt;\tilde{x}&lt;/script&gt; is just another stochastic hidden layer, which is marginalized out. This makes the abstract and introduction a little confusing.&lt;/p&gt;

&lt;p&gt;¹ In the proof of Lemma 1, when they try to show that &lt;script type=&quot;math/tex&quot;&gt;\log p(x)&lt;/script&gt; upper bounds &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_{\text{dvae}}&lt;/script&gt;, there are three expectations expanded out in the first line. If the two expectations regarding the distribution &lt;script type=&quot;math/tex&quot;&gt;q(z'\mid x)&lt;/script&gt; are more explicitly written, it is clear why the &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;’s do not necessarily cancel:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbb{E}_{q_{\psi}(z''\mid x)}
\mathbb{E}_{q_{\psi}(z'\mid x)}
\Big[
\log
\mathbb{E}_{q_{\varphi}(z\mid z'')}
\Big[
\frac{p_\theta(x,z)}{q_{\varphi}(z\mid z')}
\Big]
\Big]
\ne
\mathbb{E}_{q_{\psi}(z''\mid x)}
\mathbb{E}_{q_{\psi}(z'\mid x)}
[
\log
p_\theta(x)].&lt;/script&gt;

&lt;p&gt;When discussing this with Rajesh Ranganath, he points out a simple counterexample where &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_{\text{dvae}}&gt;\log p(x)&lt;/script&gt;: Consider a one-dimensional latent variable model, with &lt;script type=&quot;math/tex&quot;&gt;p(x,z)=\mathrm{Bernoulli}(z;0.5)&lt;/script&gt;. Let&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;q(\tilde{x}\mid x) = \mathrm{Bernoulli}(\tilde{x}; 0.5),~
q(z=1\mid \tilde{x}=1) = 0.1,~
q(z=1\mid \tilde{x}=0) = 0.9.&lt;/script&gt;

&lt;p&gt;Then &lt;script type=&quot;math/tex&quot;&gt;q(z\mid x)&lt;/script&gt; is Bernoulli with probability &lt;script type=&quot;math/tex&quot;&gt;0.5\cdot0.1+0.5\cdot0.9=0.5&lt;/script&gt;, and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{\text{dvae}} =
\mathbb{E}_{q(\tilde{x}\mid x)}\Big[\mathbb{E}_{q(z\mid x)}\Big[\log\frac{p(x, z)}{q(z\mid\tilde{x})}\Big]\Big]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;= \mathbb{E}_{q(\tilde{x}\mid x)}\Big[0.5\log\frac{0.5}{q(z=1\mid\tilde{x})}+0.5\log\frac{0.5}{q(z=0\mid\tilde{x})}\Big]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;= 0.5\Big[0.5\log\frac{0.5}{0.1}+0.5\log\frac{0.5}{0.9}\Big]
+
0.5\Big[0.5\log\frac{0.5}{0.9}+0.5\log\frac{0.5}{0.1}\Big]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;=0.510826...&lt;/script&gt;

&lt;p&gt;But &lt;script type=&quot;math/tex&quot;&gt;\log p(x)=0&lt;/script&gt;, implying &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_{\text{dvae}}&gt;\log p(x)&lt;/script&gt;. In fact, taking 0.9 in the variational parameter to be arbitrarily close to 1 makes &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_{\text{dvae}}&lt;/script&gt; explode.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2015 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Recurrent Gaussian Processes</title>
        <link>http://dustintran.com/blog/recurrent-gaussian-processes</link>
        <guid isPermaLink="true">http://dustintran.com/blog/recurrent-gaussian-processes</guid>
        <description>&lt;ul&gt;
  &lt;li&gt;César Lincoln C. Mattos, Zhenwen Dai, Andreas Damianou, Jeremy Forth, Guilherme A. Barreto, and Neil D. Lawrence. Recurrent Gaussian Processes. &lt;a href=&quot;http://arxiv.org/abs/1511.06644&quot;&gt;arXiv preprint arXiv:1511.06644&lt;/a&gt;, 2015.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is another entry into the successful consolidation of Bayesian deep learning. In the Gaussian process community of recent literature, it’s been sort of a contentious issue to try to beat the practical success of parametric functions using neural networks, with their infinite-dimensional counterpart (Neal, 1996). Gaussian processes have nice Bayesian nonparametric properties over parametric functions, and they encode a distribution over predicted values (as well as latent representations); this provides a distribution modelling uncertainty and which implicitly regularizes through Bayesian inference. As such, there is no need for many of the heuristics proposed to avoid overfitting such as dropout (which is an approximate Bayesian technique anyways). Further, these deep architectures can be applied for learning salient representations of even the smallest data sets.&lt;/p&gt;

&lt;p&gt;The paper is very much a spiritual successor to the feedforward architecture proposed in Damianou and Lawrence (2013) for composing deep Gaussian processes. Here, Mattos et al. propose a recurrent architecture for composing recurrent (deep) Gaussian processes. It’s a simple modelling change: replace the compositions of functions used in RNN’s with compositions of Gaussian processes. Not surprisingly, GPs for time series and state space models are related (Frigola et al., 2014; Damianou and Lawrence, 2015); the only difference is that the composition of Gaussian processes in the recurrent architecture leads to a latent autoregressive structure with far more expressive power. I view this difference similarly as the difference between GPLVMs (Lawrence, 2005) and deep GPs (Damianou and Lawrence, 2013).&lt;/p&gt;

&lt;p&gt;Inference is non-trivial, and it requires somewhat involved calculations that apply tricks from variational inference on Bayesian GPLVMs (Titsias and Lawrence, 2010) over and over. They are able to set optimal variational distributions for certain latent variables such as the inducing inputs, and generally require a mean-field approximation. They also apply an inference network using an RNN, to avoid learning the massive number of local variational parameters: each layer-wise function of the RNN is the output of the corresponding layer in the composition of variational parameters.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;This is definitely one of my favorite ICLR submissions this year. I see the main contribution of this work as solving two issues: 1. maintaining internal memory representations of the data using a recurrent architecture for GPs, and 2. increasing the scalability of deep GPs.&lt;/p&gt;

&lt;p&gt;Any foray into sequence modelling explains why point 1 is really cool. Point 2 is a problem in the original deep GP by Damianou and Lawrence (2013), as the number of variational parameters grows linearly with the size of the data. This makes deep GPs impractical on massive data sets in which neural networks are particularly advantageous. The authors solve this issue here using an RNN as the inference network; moreover, the particular layer-by-layer application of the RNN to output each set of local variational parameters is a pretty unique setup.&lt;/p&gt;

&lt;p&gt;On modelling, I didn’t follow the intuition behind what the shared weights in RNNs correspond to in recurrent GPs (shared kernel hyperparameters?).&lt;/p&gt;

&lt;p&gt;The model sizes studied in the experiments are rather small, using 1 or 2 hidden layers with at most 100 inducing points. Similar to the deep GP paper, it would be  insightful to study varying layers of the recurrent GP and how this impacts performance. How well the recurrent GP maintains internal memory should also be explored. For instance, one can evaluate a standard benchmark on character-to-character sequences in text.&lt;/p&gt;

&lt;p&gt;It would be very interesting to explore GRU and LSTM versions, as well as applications in which the recurrent GP employs attention. Perhaps the latter may also avoid the need for development on convolutional GPs.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Nov 2015 21:55:43 -0500</pubDate>
      </item>
    
      <item>
        <title>Adversarial autoencoders</title>
        <link>http://dustintran.com/blog/adversarial-autoencoders</link>
        <guid isPermaLink="true">http://dustintran.com/blog/adversarial-autoencoders</guid>
        <description>&lt;ul&gt;
  &lt;li&gt;Alireza Makhzani, Jonathon Shlens, Navdeep Jaitly, and Ian Goodfellow. Adversarial Autoencoders. &lt;a href=&quot;http://arxiv.org/abs/1511.05644&quot;&gt;arXiv preprint arXiv:1511.05644&lt;/a&gt;, 2015.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Following the trend in auto-encoders for generative modelling, Makhzani et al. propose an adversarial version using the framework of generative adversarial networks (Goodfellow et al., 2014). I have a bit of trouble following the terminology in these lines of works, so in my summary I will use different notation from the papers, following statistical conventions which I personally find more elucidating. And I’ll motivate it differently, coming from various divergence measure arguments.&lt;/p&gt;

&lt;p&gt;I’ll first review generative adversarial networks (GANs). Suppose we observe data &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. GANs employ a pair of models &lt;script type=&quot;math/tex&quot;&gt;(G,D)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is the generative model and &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; is a discriminative model to help perform inference on &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The discriminative model &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; aims to output high probability for samples &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; which come from the empirical data distribution &lt;script type=&quot;math/tex&quot;&gt;p_{\text{data}}(x)&lt;/script&gt;, and output low probability for samples &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; which come from the generative model &lt;script type=&quot;math/tex&quot;&gt;p_{\text{g}}(x)&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;The generative model &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; aims to fool the discriminative model, i.e., it consists of a prior &lt;script type=&quot;math/tex&quot;&gt;p(z)&lt;/script&gt; and likelihood &lt;script type=&quot;math/tex&quot;&gt;p(x\mid z)&lt;/script&gt;, and it aims to generate data most closely matching the observed data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The objective follows a minimax game&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min_G
\max_D\,
\mathbb{E}_{p_{\text{data}}(x)}[\log D(x)] + \mathbb{E}_{p_{\text{g}}(x)}[\log (1- D(x))],&lt;/script&gt;

&lt;p&gt;which alternates between learning the discriminator &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; and learning the generator &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;. The intuition is that finding the optimal &lt;script type=&quot;math/tex&quot;&gt;p_{\text{g}}(x)&lt;/script&gt; among a class of generative models &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; corresponds to minimizing the Jensen-Shannon divergence&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;JSD(p_{\text{data}}(x) \| p_{\text{g}}(x)) = \frac{1}{2}\mathrm{KL}\Big(p_{\text{data}} \Big\| \frac{p_{\text{data}} + p_{\text{g}}}{2}\Big) +
\frac{1}{2}\mathrm{KL}\Big(p_{\text{g}} \Big\| \frac{p_{\text{data}} + p_{\text{g}}}{2}\Big).&lt;/script&gt;

&lt;p&gt;Minimizing &lt;script type=&quot;math/tex&quot;&gt;JSD&lt;/script&gt; directly is not possible; this is where the objective above, using an additional discriminative model, comes in handy. Recall also that maximum likelihood estimation minimizes &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(p_{\text{data}} \| p_{\text{g}})&lt;/script&gt; (White, 1982). Using JSD leads to a more balanced approximation not underfitting or overfitting modes. It’s also worth noting that unlike approximate posterior inference, these are divergence measures directly on data distributions for &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, not on latent variable distributions for &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;. For example, variational inference minimizes &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(q(z) \| p(z\mid x))&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;In adversarial auto-encoders, we go back to minimizing divergence measures on the latent variables. Recall that the variational auto-encoder’s objective (Kingma and Welling, 2014) is equivalently&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min_q\, \mathbb{E}_{q(z\mid x)}[-\log p(x\mid z)] + \mathrm{KL}(q(z\mid x)\|p(z)),&lt;/script&gt;

&lt;p&gt;where the first term is the reconstruction error—with the decoder &lt;script type=&quot;math/tex&quot;&gt;p(x\mid z)&lt;/script&gt; evaluating codes from the encoder &lt;script type=&quot;math/tex&quot;&gt;q(z\mid x)&lt;/script&gt;—and the second term is the regularizer. The adversarial auto-encoder’s objective simply changes the regularizer to &lt;script type=&quot;math/tex&quot;&gt;JSD(p(z)\|q(z))&lt;/script&gt;, where we define the &lt;em&gt;aggregated posterior&lt;/em&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;q(z) = \int q(z\mid x) p_{\text{data}}(x)\mathrm{d}x.&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;JSD(p(z)\|q(z))&lt;/script&gt; is just as intractable as minimizing &lt;script type=&quot;math/tex&quot;&gt;JSD&lt;/script&gt; in the data space, so it requires an adversarial network: &lt;script type=&quot;math/tex&quot;&gt;p(z)&lt;/script&gt; replaces the original &lt;script type=&quot;math/tex&quot;&gt;p_{\text{data}}(x)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;q(z\mid x)&lt;/script&gt; replaces the original &lt;script type=&quot;math/tex&quot;&gt;p_{\text{g}}(x)&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min_G
\max_D\,
\mathbb{E}_{p(z)}[\log D(z)] + \mathbb{E}_{q(z\mid x)}[\log (1- D(z))].&lt;/script&gt;

&lt;p&gt;To train adversarial autoencoders, one alternates between minimizing the reconstruction error of the auto-encoder, i.e., &lt;script type=&quot;math/tex&quot;&gt;\mathbb{E}_{q(z\mid x)}[-\log p(x\mid z)]&lt;/script&gt;, and training the adversarial network. The rest of the paper goes into standard experiments for semi-supervised learning on MNIST and SVHN. They also comment on an extension of generative moment matching networks (Li et al., 2015) to auto-encoders, also following these ideas.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;I see generative adversarial networks as fascinating inference algorithms because they’re a rare case where we can minimize a more general divergence measure between the generative model and the data distribution. It makes sense that one should avoid MLE’s KL objective, which can lead to overdispersed distributions, in favor of this approach. And it’s great to see attempts at trying to port these same ideas to the variational inference/auto-encoder setting.&lt;/p&gt;

&lt;p&gt;The experiments seem to show that adversarial auto-encoders lead to higher visual fidelity than variational auto-encoders. It’s not clear to me  why this is the case however. The fact that there’s even a KL term as a regularizer in the VAE objective is a simple byproduct of the variational lower bound. In the end, it is still minimizing &lt;script type=&quot;math/tex&quot;&gt;\mathrm{KL}(q(z\mid x)\|p(z\mid x))&lt;/script&gt;. However, replacing the KL regularizer with &lt;script type=&quot;math/tex&quot;&gt;JSD&lt;/script&gt; makes it unclear what the underlying divergence measure is any longer. I buy that &lt;script type=&quot;math/tex&quot;&gt;JSD&lt;/script&gt; ensures less “holes” as &lt;script type=&quot;math/tex&quot;&gt;q(z)&lt;/script&gt; approximates the prior &lt;script type=&quot;math/tex&quot;&gt;p(z)&lt;/script&gt;, but there’s a weird conflict as &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; simultaneously gets trained when minimizing the reconstruction error. The underlying divergence measure, if it exists, is most likely not as simple as &lt;script type=&quot;math/tex&quot;&gt;JSD(p(z\mid x)\|q(z\mid x))&lt;/script&gt;—although if it were then that would be fantastic(?). Does this alternating procedure also necessarily converge?&lt;/p&gt;

&lt;p&gt;Obligatory comment in relation to hierarchical variational models (Ranganath et al., 2015): Their “universal approximator posterior”, as a possible choice for the encoder &lt;script type=&quot;math/tex&quot;&gt;q(z\mid x)&lt;/script&gt;, is a hierarchical variational model. To wield the intractability of the density they naively apply Monte Carlo estimates. We’ve found this not to work well in practice due to very high variance, forcing a more complicated inference procedure which we outline in our paper.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;edit&lt;/em&gt; (12/1/15): A previous version of this post wrote &lt;script type=&quot;math/tex&quot;&gt;\mathrm{JSD}(p(z)\|q(z\mid x))&lt;/script&gt; instead of &lt;script type=&quot;math/tex&quot;&gt;\mathrm{JSD}(p(z)\|q(z))&lt;/script&gt;. Thanks to Alireza Makhzani for the correction.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Nov 2015 16:19:10 -0500</pubDate>
      </item>
    
      <item>
        <title>Infinite Dimensional Word Embeddings</title>
        <link>http://dustintran.com/blog/infinite-dimensional-word-embeddings</link>
        <guid isPermaLink="true">http://dustintran.com/blog/infinite-dimensional-word-embeddings</guid>
        <description>&lt;ul&gt;
  &lt;li&gt;Eric Nalisnick and Sachin Ravi. Infinite Dimensional Word Embeddings. &lt;a href=&quot;http://arxiv.org/abs/1511.05392&quot;&gt;arXiv preprint arXiv:1511.05392&lt;/a&gt;, 2015.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Word embeddings have been huge for the NLP community ever since Tomas Mikolov’s 2013 paper (it’s gotten over 1000 citations in 2 years!). The basic idea is to learn a &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;-dimensional parameter vector &lt;script type=&quot;math/tex&quot;&gt;w_i\in\mathbb{R}^z&lt;/script&gt; associated to each word in a vocabulary. This is important as part of a machine learning pipeline which extracts features for language models, text classification, etc. Not unlike advertisements of discrete Bayesian nonparametric models, Nalisnick and Ravi propose the Infinite Skip-Gram model, which allows the dimension &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; of the word vectors to grow arbitrarily.&lt;/p&gt;

&lt;p&gt;Letting word vector &lt;script type=&quot;math/tex&quot;&gt;w_i\in\mathbb{R}^\infty&lt;/script&gt;, context vector &lt;script type=&quot;math/tex&quot;&gt;c_k\in\mathbb{R}^\infty&lt;/script&gt;, and random positive integer &lt;script type=&quot;math/tex&quot;&gt;z\in\mathbb{Z}^+&lt;/script&gt;, they consider multinomial logistic regression with (Eq.3)&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(w_i,c_k,z) = \frac{1}{Z} e^{-E(w_i,c_k,z)},&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; is the partition function summing over all &lt;script type=&quot;math/tex&quot;&gt;w_i,c_k,z&lt;/script&gt;. This is the same as the original model for word embeddings, except now there is an auxiliary variable &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; and the vectors are infinite-dimensional. This seems intractable given some energy function &lt;script type=&quot;math/tex&quot;&gt;E(w_i,c_k,z)&lt;/script&gt;, as the partition function requires a summation over countably infinite values of &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;. However, similar to Côté and Larochelle (2015), they show that the following penalized energy function enables finite computation (Eq.4):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E(w_i,c_k,z) = -\sum_{j=1}^z w_{i,j} c_{k,j} + \Big[z\log a -\sum_{j=1}^z (w_{i,j}^2 +  c_{k,j}^2)\Big].&lt;/script&gt;

&lt;p&gt;The first term is the original (unpenalized) energy function, which is the inner product of &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;-dimensional vectors. The second term, the penalty, consists of two expressions: the &lt;script type=&quot;math/tex&quot;&gt;L_2&lt;/script&gt; penalty forces the word and context vectors to be zero after sufficiently large index, and the &lt;script type=&quot;math/tex&quot;&gt;z\log a&lt;/script&gt; term forces a convergent geometric series for the denominator of the conditional distribution &lt;script type=&quot;math/tex&quot;&gt;p(z\mid w, c)&lt;/script&gt; (Eq.5). Tractability of the conditional distribution is required during optimization.&lt;/p&gt;

&lt;p&gt;For inference, they treat &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; as a nuisance parameter and perform an approximate maximum likelihood estimation. Specifically, they minimize an upper bound to the negative log-likelihood &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}=-\log \int p(c,z\mid w)~\mathrm{d}z&lt;/script&gt; over the word vectors &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;. Similar to how word embeddings require negative sampling for computational efficiency, Nalisnick and Ravi make additional Monte Carlo approximations, such as evaluating Monte Carlo estimates of the gradient of (an upper bound to) this objective.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;Very cool idea! I’m always a fan of infinite-dimensional models, not just because they’re mathematically interesting but because there’s no reason that word vectors should be restricted to a fixed dimensionality. In a streaming setting, for example, the word representations should grow increasingly more complex as more information in the data is available.&lt;/p&gt;

&lt;p&gt;Although they don’t explicitly state this, what they’re really doing is applying a variational lower bound for inference, invoking Jensen’s inequality and setting the variational distribution as the prior &lt;script type=&quot;math/tex&quot;&gt;~q(z)= p(z\mid w_i)&lt;/script&gt; (Eq.7). If readers are familiar with the &lt;a href=&quot;http://blog.shakirm.com/2015/11/machine-learning-trick-of-the-day-5-log-derivative-trick/&quot;&gt;score function estimator&lt;/a&gt; used for variational inference (Paisley et al., 2012), the Monte Carlo gradient in Eq.10 applies the same trick. Following this interpretation, it surprises me then that the algorithm works so well. Using model priors for variational approximations make for quite a loose lower bound of the log-likelihood.&lt;/p&gt;

&lt;p&gt;I highly recommmend reading this paper. It’s very well-written and easy to read even if you don’t know anything about word embeddings. The related work section places it very appropriately in context. They mention Vilnis and McCallum (2015) a lot, and I’d be very interested to see if they can extend their work to inferring infinite-dimensional distributions of words rather than infinite-dimensional point-estimates of words.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 17:30:15 -0500</pubDate>
      </item>
    
      <item>
        <title>Neural Variational Inference for Text Processing</title>
        <link>http://dustintran.com/blog/neural-variational-inference-for-text-processing</link>
        <guid isPermaLink="true">http://dustintran.com/blog/neural-variational-inference-for-text-processing</guid>
        <description>&lt;ul&gt;
  &lt;li&gt;Yishu Miao, Lei Yu, Phil Blunsom. Neural Variational Inference for Text Processing. &lt;a href=&quot;http://arxiv.org/abs/1511.06038&quot;&gt;arXiv preprint arXiv:1511.06038&lt;/a&gt;, 2015.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Following recent work on variational auto-encoders and their advances in computer vision, the authors propose deep generative models and related inference algorithms for text. The Neural Variational Document Model (NVDM) is an instantiation of the variational auto-encoder for deep latent Gaussian models, where the data input is the bag-of-words representation of the document. There’s a cool interpretation of this, as the Gaussian latent variables can be thought of as the embedding of the discrete vocabulary in a real-valued latent space. In the scenario of multiple hidden layers, the deep latent Gaussian model can be seen as sequentially embedding each corresponding value within nested latent spaces.&lt;/p&gt;

&lt;p&gt;As a more complex model, they also propose the Neural Answer Selection Model (NASM) for answer sentence selection, in which the task is to identify the correct answers to a question from a set of possible answers. The NASM employs a latent attention model similar to the deep recurrent attentive writer (Gregor et al., 2015) for modelling images. Given a question &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;, it attends a set of answer sentences &lt;script type=&quot;math/tex&quot;&gt;~\{a_1,\ldots,a_n\}&lt;/script&gt; associated with &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;; this in turn determines the context vector, which are the words in the answer sentences that are prominent for predicting the answer matches to the current question. This enables the model to learn subtleties inherent in the questions.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;It’s a simple idea coming from the variational auto-encoder literature and their recent state-of-the-art advances for unsupervised learning in computer vision. This is well worth studying. Interestingly, there doesn’t seem to be any complications when transferring these same ideas to analyzing text.&lt;/p&gt;

&lt;p&gt;Confusingly, it doesn’t apply neural variational inference from Mnih and Gregor (2014), as the generative model is continuous. Instead it uses the more common tricks standard in variational auto-encoders.&lt;/p&gt;

&lt;p&gt;It would have been interesting to study a generative model  of documents which also employs a latent attention architecture. Most immediate in my mind would be avoiding the bag-of-words representation and explicitly modelling the word-to-word sequence of the documents.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 04:48:57 -0500</pubDate>
      </item>
    
  </channel>
</rss>
